import pygame, math, random, sys
import numpy as np

#initialising fonts
pygame.font.init()

#setting up window and title
WIDTH, HEIGHT = 600, 600
WIN = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption("~*~Automata~*~")
FPS = 60

#loading some colours
BLUE = (0,0,155)
RED = (155,0,0)
GREEN = (0,155,0)
BLACK = (10,10,10)
YELLOW = (255,255,50)
WHITE = (255,255,255)
LT_BLUE = (100,100,155)

#fonts
SML_FONT = pygame.font.SysFont("Impact",20)
MED_FONT = pygame.font.SysFont("Impact",35)
LRG_FONT = pygame.font.SysFont("Impact",60)
HUGE_FONT = pygame.font.SysFont("Impact",80)

states = [] #2d array of bools
blocks = [] #actual objects
rects = [] #rects for collisions

off_nums = [] #for the custom games, stores number of neighbours for turning cells off/on
on_nums = []

grid_lines = True

#block class creates the cells within the grid, and includes methods that govern behaviour based on surrounding cells
class Block:
    def __init__(self, state, grid, size, count=-1):
        self.state = state
        self.grid = grid
        self.count = count
        self.size = size

    def draw(self):
        pad = (WIDTH - (WIDTH//grid_size*grid_size))//2
        if self.state==True:
            pygame.draw.rect(WIN,BLACK,(self.grid[0]*self.size+pad,self.grid[1]*self.size+pad,self.size,self.size))
        elif self.state==False:
            if grid_lines==True:
                pygame.draw.rect(WIN,GREEN,(self.grid[0]*self.size+pad+1,self.grid[1]*self.size+pad+1,self.size-2,self.size-2))
            else:
                pygame.draw.rect(WIN,GREEN,(self.grid[0]*self.size+pad+1,self.grid[1]*self.size+pad+1,self.size,self.size))


    def make_rect(self): #not super necessary, mostly for potential expansion where player can click to switch cell state
        pad = (WIDTH - (WIDTH//grid_size*grid_size))//2
        rect = pygame.Rect(self.grid[0]*20+pad,self.grid[1]*20+pad,20,20)
        return rect
        #rects.append(rect)

    def count_adjacent(self):
        count = 0
        try:
            if states[self.grid[0]-1][self.grid[1]-1]==True:
                count+=1
        except:
            pass
        try:
            if states[self.grid[0]-1][self.grid[1]]==True:
                count+=1
        except:
            pass
        try:
            if states[self.grid[0]-1][self.grid[1]+1]==True:
                count+=1
        except:
            pass
        try:
            if states[self.grid[0]][self.grid[1]-1]==True:
                count+=1
        except:
            pass
        try:
            if states[self.grid[0]][self.grid[1]+1]==True:
                count+=1
        except:
            pass
        try:
            if states[self.grid[0]+1][self.grid[1]-1]==True:
                count+=1
        except:
            pass
        try:
            if states[self.grid[0]+1][self.grid[1]]==True:
                count+=1
        except:
            pass
        try:
            if states[self.grid[0]+1][self.grid[1]+1]==True:
                count+=1
        except:
            pass
        return count

#below methods each determine the cell's state for the next generation, depending on the number of surrounding cells which are off or on
#three methods for the three current modes: og= plain game of life, dnn= day and night, cstm= custom game

    def live_og(self):
        if self.count==3 and self.state==False:
            self.state = True
        elif 1<self.count<4 and self.state==True:
            self.state = True
        elif self.state==True:
            self.state= False
        else:
            pass

    def live_dnn(self):
        if self.count in [3,6,7,8] and self.state==False:
            self.state = True
        elif self.count in [3,4,6,7,8] and self.state==True:
            self.state = True
        elif self.state==True:
            self.state= False
        else:
            pass

    def live_cstm(self):
        if self.count in on_nums and self.state==False:
            self.state = True
        elif self.count in off_nums and self.state==True:
            self.state = True
        elif self.state==True:
            self.state= False
        else:
            pass

#variables and main construction of grid and cells for non-custom games
population = 0.25
grid_size = 30

def make_cells():
    #pad = (WIDTH - (WIDTH//grid_size*grid_size))//2
    cell_size = WIDTH//grid_size
    for i in range(grid_size):
        state_sublist = []
        for j in range(grid_size):
            rand = random.uniform(0,1)
            if rand<population:
                x = True
            else:
                x = False
            b = Block(x,[i,j],cell_size)
            rect = Block.make_rect(b)
            state_sublist.append(x)
            rects.append(rect)
            blocks.append(b)
        states.append(state_sublist)

def draw_grid(): # not currently in use
    pad = (WIDTH - (WIDTH//grid_size*grid_size))//2
    cell_size = WIDTH//grid_size
    for i in range(grid_size):
        for j in range(grid_size):
            pygame.draw.rect(WIN, BLACK, (i*cell_size+pad,j*cell_size+pad,cell_size,cell_size), 1)

gen_speed = 0

#the main game function below takes as an argument which mode has been selected, and runs the corresponding thing depending on that

def game(state):

    make_cells()
    clock = pygame.time.Clock()
    generation = 0

    if state=="original":
        og_game = True
        while og_game:
            pos = pygame.mouse.get_pos()
            clock.tick(3)
            generation+=0.01
            WIN.fill(BLACK)
            #draw_grid()
            for i in blocks:
                Block.draw(i)
            for i in blocks:
                i.count = Block.count_adjacent(i)

            for i in blocks:
                Block.live_og(i)
                states[i.grid[0]][i.grid[1]] = i.state

            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key==pygame.K_RETURN:
                        pygame.image.save(WIN,"game_of_life{}.png".format("".join(str(random.randint(1,20)) for i in range(3))))

    if state=="daynight":
        dnn_game = True
        while dnn_game:
            pos = pygame.mouse.get_pos()
            clock.tick(3)
            generation+=0.01
            WIN.fill(BLACK)
            #draw_grid()
            for i in blocks:
                Block.draw(i)
            for i in blocks:
                i.count = Block.count_adjacent(i)

            for i in blocks:
                Block.live_dnn(i)
                states[i.grid[0]][i.grid[1]] = i.state

            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key==pygame.K_RETURN:
                        pygame.image.save(WIN,"day_and_night{}.png".format("".join(str(random.randint(1,20)) for i in range(3))))

    if state=="custom":
        cstm_game = True
        while cstm_game:
            pos = pygame.mouse.get_pos()
            clock.tick(gen_speed)
            generation+=0.01
            WIN.fill(BLACK)
            #draw_grid()
            for i in blocks:
                Block.draw(i)
            for i in blocks:
                i.count = Block.count_adjacent(i)

            for i in blocks:
                Block.live_cstm(i)
                states[i.grid[0]][i.grid[1]] = i.state

            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key==pygame.K_RETURN:
                        pygame.image.save(WIN,"custom_automata{}.png".format("".join(str(random.randint(1,20)) for i in range(3))))

#opening menu screen

def splash_screen():
    splash = True
    while splash:
        pos = pygame.mouse.get_pos()
        WIN.fill(RED)

        #title
        title = HUGE_FONT.render("*~ Automata ~*",1,BLACK)
        WIN.blit(title,((WIDTH-title.get_width())/2,10))
        subtitle = MED_FONT.render("Run some cellular automata!",1,BLACK)
        WIN.blit(subtitle,((WIDTH-subtitle.get_width())/2,100))

        #custom game button
        cstm_game_btn = pygame.draw.rect(WIN, BLACK, (100,195,400,50))
        cstm_text = MED_FONT.render("CUSTOM GAME",1,RED)
        WIN.blit(cstm_text,((WIDTH-cstm_text.get_width())/2,198))

        #game of life button
        std_game_btn = pygame.draw.rect(WIN, BLACK, (100,320,400,50))
        std_text = MED_FONT.render("GAME OF LIFE",1,RED)
        WIN.blit(std_text,((WIDTH-std_text.get_width())/2,323))

        #day and night button
        dnn_game_btn = pygame.draw.rect(WIN, BLACK, (100,445,400,50))
        dnn_text = MED_FONT.render("DAY AND NIGHT",1,RED)
        WIN.blit(dnn_text,((WIDTH-dnn_text.get_width())/2,448))

        #note to user on saving as image
        save_txt = SML_FONT.render("Psst. Press Enter to save as an image!",1,BLACK)
        WIN.blit(save_txt,((WIDTH-save_txt.get_width())/2,550))

        pygame.display.update()

        #logic for button click events, starts the main game in the relevant mode or takes you to the custom screen
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN and event.button==1:
                if std_game_btn.collidepoint(pos):
                    game("original")
            if event.type == pygame.MOUSEBUTTONDOWN and event.button==1:
                if dnn_game_btn.collidepoint(pos):
                    game("daynight")
            if event.type == pygame.MOUSEBUTTONDOWN and event.button==1:
                if cstm_game_btn.collidepoint(pos):
                    custom_screen()

#user can select the settings for a custom game with this screen

def custom_screen():
    global population
    global grid_size
    global gen_speed
    global grid_lines
    custom = True

    #numbers below place the sliders at their starting position which can then be changed in the gui
    pop_x = 180
    grid_x = 180
    speed_x = 180

    #rects for interacting with the radio button style boxes. lists store the colours they will have on start up, which then affect the logic when run
    on_square_rects = []
    on_square_colours = [WHITE,WHITE,LT_BLUE,WHITE,WHITE,LT_BLUE,LT_BLUE,LT_BLUE]
    off_square_rects = []
    off_square_colours = [WHITE,WHITE,LT_BLUE,LT_BLUE,WHITE,LT_BLUE,LT_BLUE,LT_BLUE]
    grid_choices = [LT_BLUE,WHITE]

    while custom:
        pos = pygame.mouse.get_pos()
        mouse_x = pos[0]
        WIN.fill(BLUE)
        custom_title = LRG_FONT.render("CUSTOM GAME",1,WHITE)
        WIN.blit(custom_title,((WIDTH-custom_title.get_width())/2,1))

        #start population/percentage live seed  -- slider
        start_pop = SML_FONT.render("START POPULATION",1,WHITE)
        WIN.blit(start_pop,((WIDTH-start_pop.get_width())/2,100))
        pygame.draw.rect(WIN,LT_BLUE,(100,150,400,16))
        pop_slider = pygame.draw.rect(WIN,WHITE,(pop_x,128,30,60))

        #grid size  -- slider
        grid_text = SML_FONT.render("GRID SIZE",1,WHITE)
        WIN.blit(grid_text,((WIDTH-grid_text.get_width())/2,200))
        pygame.draw.rect(WIN,LT_BLUE,(100,250,400,16))
        grid_slider = pygame.draw.rect(WIN,WHITE,(grid_x,228,30,60))

        #speed  -- slider
        speed_text = SML_FONT.render("GENERATION SPEED",1,WHITE)
        WIN.blit(speed_text,((WIDTH-speed_text.get_width())/2,300))
        pygame.draw.rect(WIN,LT_BLUE,(100,350,400,16))
        speed_slider = pygame.draw.rect(WIN,WHITE,(speed_x,328,30,60))

        #neighbour rules x2: one for when a dead cell lives (up to 8), one for when a live cell survives  -- boxes
        live_label = SML_FONT.render("Neighbours: Cell On",1,WHITE)
        WIN.blit(live_label,((WIDTH-live_label.get_width())/4,400))
        off_label = SML_FONT.render("Neighbours: Cell Off",1,WHITE)
        WIN.blit(off_label,((WIDTH-off_label.get_width())*0.75,400))

        #grid lines optional
        grid_txt = SML_FONT.render("Show Grid Lines:      YES                  NO",1,WHITE)
        WIN.blit(grid_txt,(100,70))
        yes_box = pygame.draw.rect(WIN,grid_choices[0],(290,75,15,15))
        no_box = pygame.draw.rect(WIN,grid_choices[1],(383,75,15,15))

        #drawing the buttons for neighbour rules
        for i in range(8):
            num_text = SML_FONT.render("{}".format(i+1),1,WHITE)
            WIN.blit(num_text, (103+i*23,450))
            pygame.draw.rect(WIN,on_square_colours[i],(100+i*23,435,15,15))
            on_square_rects.append(pygame.Rect(100+i*23,435,15,15))
        for i in range(8):
            num_text = SML_FONT.render("{}".format(i+1),1,WHITE)
            WIN.blit(num_text, (325+i*23,450))
            pygame.draw.rect(WIN,off_square_colours[i],(322+i*23,435,15,15))
            off_square_rects.append(pygame.Rect(322+i*23,435,15,15))

        #start button runs the main function
        start_btn = pygame.draw.rect(WIN,LT_BLUE,(150,520,300,50))
        begin_text = MED_FONT.render("B E G I N",1,WHITE)
        WIN.blit(begin_text,((WIDTH-begin_text.get_width())/2,522))

        pygame.display.update()

        #logic for events, clicks, button presses
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            #if left mouse button clicked
            if event.type == pygame.MOUSEBUTTONDOWN and event.button==1:
                #changes the colour of the grid line or no lines boxes if clicked, allowing one at a time to be active
                if yes_box.collidepoint(pos):
                    grid_choices[0] = LT_BLUE
                    if grid_choices[1]==LT_BLUE:
                        grid_choices[1]=WHITE
                if no_box.collidepoint(pos):
                    grid_choices[1] = LT_BLUE
                    if grid_choices[0]==LT_BLUE:
                        grid_choices[0]=WHITE

                #changes the colour of the buttons for number of active neighbours to turn current cell on/off based on
                for i in on_square_rects:
                    if i.collidepoint(pos):
                        if on_square_colours[on_square_rects.index(i)] == LT_BLUE:
                            on_square_colours[on_square_rects.index(i)] = WHITE
                        else:
                            on_square_colours[on_square_rects.index(i)] = LT_BLUE
                for i in off_square_rects:
                    if i.collidepoint(pos):
                        if off_square_colours[off_square_rects.index(i)] == LT_BLUE:
                            off_square_colours[off_square_rects.index(i)] = WHITE
                        else:
                            off_square_colours[off_square_rects.index(i)] = LT_BLUE

                #start button logic, sets parameters based on what has been selected and then runs the game
                if start_btn.collidepoint(pos):
                    if grid_choices[1]==LT_BLUE:
                        grid_lines = False
                    gen_speed = int(speed_x/100*2)
                    grid_size = grid_x//5
                    population = pop_x/500
                    for c,v in enumerate(off_square_colours):
                        if v== LT_BLUE:
                            off_nums.append(c+1)
                    for c,v in enumerate(on_square_colours):
                        if v== LT_BLUE:
                            on_nums.append(c+1)
                    game("custom")

            clicked = pygame.mouse.get_pressed()

            #drags the slider by changing the x position of rectangle based on mouse position. minus 10 so that it stays overlapped with the mouse
            if clicked[0]==True:
                if pop_slider.collidepoint(pos) and 109<mouse_x<481:
                    pop_x = mouse_x-10
                if grid_slider.collidepoint(pos) and 109<mouse_x<481:
                    grid_x = mouse_x-10
                if speed_slider.collidepoint(pos) and 109<mouse_x<481:
                    speed_x = mouse_x-10

if __name__ =="__main__":
    splash_screen()
